{"ast":null,"code":"var _jsxFileName = \"/Users/markyu/Desktop/work/fetch-robotics/path_planner/client/src/components/board/board.component.js\";\nimport React from 'react';\nimport './board.styles.scss';\nimport Cell from '../cell/cell.component'; // const Board = ({width, height, start, goal, paths}) => {\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.buildBlock = () => {\n      const {\n        width,\n        height,\n        start,\n        goal,\n        paths\n      } = this.props;\n      const boardArray = new Array(width); // const boardJSX = [];\n\n      for (var i = 0; i < boardArray.length; i++) {\n        boardArray[i] = new Array(height);\n\n        for (var j = 0; j < boardArray.length; j++) {\n          boardArray[i][j] = {\n            isStart: false,\n            isGoal: false,\n            inPath: false,\n            value: 1\n          };\n        }\n      } // console.log(width);\n      // console.log(boardArray);\n      // console.log(start.i);\n      // console.log(start.j);\n\n\n      const boardJSX = [];\n\n      if (boardArray.length > 0) {\n        // console.log(boardArray);\n        boardArray[start.i][start.j].isStart = true;\n        boardArray[goal.i][goal.j].isGoal = true;\n        paths.forEach(item => {\n          boardArray[item.i][item.j].inPath = true;\n        });\n        boardArray.forEach((item1, i) => {\n          item1.forEach((item2, j) => {\n            if ((j + 1) % height === 0) boardJSX.push(React.createElement(\"span\", {\n              key: -i - 0.1,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 73\n              },\n              __self: this\n            }, React.createElement(Cell, {\n              key: (i + 1) * height + j,\n              isStart: item2.isStart,\n              isGoal: item2.isGoal,\n              inPath: item2.inPath,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 74\n              },\n              __self: this\n            }), React.createElement(\"br\", {\n              key: -i - 0.2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 80\n              },\n              __self: this\n            })));else boardJSX.push(React.createElement(Cell, {\n              key: (i + 1) * height + j,\n              isStart: item2.isStart,\n              isGoal: item2.isGoal,\n              inPath: item2.inPath,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 84\n              },\n              __self: this\n            }));\n          });\n        });\n      }\n\n      return boardJSX;\n    };\n  } // document.addEventListener('keydown', )\n  // const boardArray = new Array(width*height);\n  // for(var i = 0; i < boardArray.length; i++) boardArray[i] = 1;\n\n\n  componentDidMount() {\n    document.addEventListener('keydown', e => {\n      const {\n        changeStart,\n        updateMovement,\n        start,\n        width,\n        height\n      } = this.props;\n\n      if (e.key === 'w' && start.i !== 0) {\n        updateMovement(start.i - 1, start.j);\n        changeStart();\n      }\n\n      if (e.key === 'a' && start.j !== 0) {\n        updateMovement(start.i, start.j - 1);\n        changeStart();\n      }\n\n      if (e.key === 's' && start.i !== height - 1) {\n        updateMovement(start.i + 1, start.j);\n        changeStart();\n      }\n\n      if (e.key === 'd' && start.j !== width - 1) {\n        updateMovement(start.i, start.j + 1);\n        changeStart();\n      }\n    });\n  } // logKey = (e) => {\n  // }\n\n\n  // const boardJSX = boardArray.map((val, index) => {\n  //     // ((index+1) % width) == 0 ? \n  //     // <span><Cell /><br /></span>\n  //     // :\n  //     // <Cell />;\n  //     // console.log(index)\n  //     if((index+1) % width === 0) {\n  //         // console.log('??');\n  //         return(<span><Cell key={index} /><br /></span>);\n  //     }\n  //     else return(<Cell key={index}/>);\n  // });\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, this.buildBlock());\n  }\n\n}\n\n;\nexport default Board;","map":{"version":3,"sources":["/Users/markyu/Desktop/work/fetch-robotics/path_planner/client/src/components/board/board.component.js"],"names":["React","Cell","Board","Component","constructor","props","buildBlock","width","height","start","goal","paths","boardArray","Array","i","length","j","isStart","isGoal","inPath","value","boardJSX","forEach","item","item1","item2","push","componentDidMount","document","addEventListener","e","changeStart","updateMovement","key","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './board.styles.scss';\n\nimport Cell from '../cell/cell.component'\n\n// const Board = ({width, height, start, goal, paths}) => {\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    // document.addEventListener('keydown', )\n    // const boardArray = new Array(width*height);\n    // for(var i = 0; i < boardArray.length; i++) boardArray[i] = 1;\n\n    componentDidMount() {\n        document.addEventListener('keydown', (e) => {\n            const { changeStart, updateMovement, start, width, height } = this.props;\n            if(e.key === 'w' && start.i !== 0) {\n                updateMovement(start.i-1, start.j);\n                changeStart();\n            }\n            if(e.key === 'a' && start.j !== 0) {\n                updateMovement(start.i, start.j-1);\n                changeStart();\n            }\n            if(e.key === 's' && start.i !== height-1) {\n                updateMovement(start.i+1, start.j);\n                changeStart();\n            }\n            if(e.key === 'd' && start.j !== width-1) {\n                updateMovement(start.i, start.j+1);\n                changeStart();\n            }\n        });\n    }\n\n    // logKey = (e) => {\n\n    // }\n\n    buildBlock = () => {\n        const { width, height, start, goal, paths } = this.props\n        const boardArray = new Array(width);\n        // const boardJSX = [];\n        for (var i = 0; i < boardArray.length; i++) {\n            boardArray[i] = new Array(height);\n            for (var j = 0; j < boardArray.length; j++) {\n                boardArray[i][j] = {\n                    isStart: false,\n                    isGoal: false,\n                    inPath: false,\n                    value: 1,\n                }\n            }\n        }\n        // console.log(width);\n        // console.log(boardArray);\n        // console.log(start.i);\n        // console.log(start.j);\n        const boardJSX = [];\n        if (boardArray.length > 0) {\n            // console.log(boardArray);\n            boardArray[start.i][start.j].isStart = true;\n            boardArray[goal.i][goal.j].isGoal = true;\n\n            paths.forEach((item) => {\n                boardArray[item.i][item.j].inPath = true;\n            });\n\n            boardArray.forEach((item1, i) => {\n                item1.forEach((item2, j) => {\n                    if ((j + 1) % height === 0) boardJSX.push(\n                        <span key={-i - 0.1}>\n                            <Cell\n                                key={(i + 1) * height + j}\n                                isStart={item2.isStart}\n                                isGoal={item2.isGoal}\n                                inPath={item2.inPath}\n                            />\n                            <br key={-i - 0.2} />\n                        </span>\n                    );\n                    else boardJSX.push(\n                        <Cell\n                            key={(i + 1) * height + j}\n                            isStart={item2.isStart}\n                            isGoal={item2.isGoal}\n                            inPath={item2.inPath}\n                        />);\n                });\n            });\n        }\n        return boardJSX;\n    }\n\n\n    // const boardJSX = boardArray.map((val, index) => {\n    //     // ((index+1) % width) == 0 ? \n    //     // <span><Cell /><br /></span>\n    //     // :\n    //     // <Cell />;\n    //     // console.log(index)\n    //     if((index+1) % width === 0) {\n    //         // console.log('??');\n    //         return(<span><Cell key={index} /><br /></span>);\n    //     }\n    //     else return(<Cell key={index}/>);\n    // });\n    render() {\n    return(\n        <div className = 'Board' >\n            { this.buildBlock() }\n        </div>\n    );}\n};\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}